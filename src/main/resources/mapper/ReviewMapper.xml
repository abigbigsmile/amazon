<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.smile.amazon.mapper.ReviewMapper">
  <resultMap id="BaseResultMap" type="com.smile.amazon.model.Review">
    <id column="review_id" jdbcType="INTEGER" property="reviewId" />
    <result column="book_id" jdbcType="INTEGER" property="bookId" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="review_time" jdbcType="TIMESTAMP" property="reviewTime" />
    <result column="love" jdbcType="INTEGER" property="love" />
    <result column="hate" jdbcType="INTEGER" property="hate" />
    <result column="review_title" jdbcType="VARCHAR" property="reviewTitle" />
    <result column="review_content" jdbcType="VARCHAR" property="reviewContent" />
  </resultMap>
  <sql id="Base_Column_List">
    review_id, book_id, user_id, review_time, love, hate, review_title, review_content
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from review
    where review_id = #{reviewId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from review
    where review_id = #{reviewId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.smile.amazon.model.Review">
    insert into review (review_id, book_id, user_id, 
      review_time, love, hate, 
      review_title, review_content)
    values (#{reviewId,jdbcType=INTEGER}, #{bookId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, 
      #{reviewTime,jdbcType=TIMESTAMP}, #{love,jdbcType=INTEGER}, #{hate,jdbcType=INTEGER}, 
      #{reviewTitle,jdbcType=VARCHAR}, #{reviewContent,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.smile.amazon.model.Review">
    insert into review
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="reviewId != null">
        review_id,
      </if>
      <if test="bookId != null">
        book_id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="reviewTime != null">
        review_time,
      </if>
      <if test="love != null">
        love,
      </if>
      <if test="hate != null">
        hate,
      </if>
      <if test="reviewTitle != null">
        review_title,
      </if>
      <if test="reviewContent != null">
        review_content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="reviewId != null">
        #{reviewId,jdbcType=INTEGER},
      </if>
      <if test="bookId != null">
        #{bookId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="reviewTime != null">
        #{reviewTime,jdbcType=TIMESTAMP},
      </if>
      <if test="love != null">
        #{love,jdbcType=INTEGER},
      </if>
      <if test="hate != null">
        #{hate,jdbcType=INTEGER},
      </if>
      <if test="reviewTitle != null">
        #{reviewTitle,jdbcType=VARCHAR},
      </if>
      <if test="reviewContent != null">
        #{reviewContent,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.smile.amazon.model.Review">
    update review
    <set>
      <if test="bookId != null">
        book_id = #{bookId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="reviewTime != null">
        review_time = #{reviewTime,jdbcType=TIMESTAMP},
      </if>
      <if test="love != null">
        love = #{love,jdbcType=INTEGER},
      </if>
      <if test="hate != null">
        hate = #{hate,jdbcType=INTEGER},
      </if>
      <if test="reviewTitle != null">
        review_title = #{reviewTitle,jdbcType=VARCHAR},
      </if>
      <if test="reviewContent != null">
        review_content = #{reviewContent,jdbcType=VARCHAR},
      </if>
    </set>
    where review_id = #{reviewId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.smile.amazon.model.Review">
    update review
    set book_id = #{bookId,jdbcType=INTEGER},
      user_id = #{userId,jdbcType=INTEGER},
      review_time = #{reviewTime,jdbcType=TIMESTAMP},
      love = #{love,jdbcType=INTEGER},
      hate = #{hate,jdbcType=INTEGER},
      review_title = #{reviewTitle,jdbcType=VARCHAR},
      review_content = #{reviewContent,jdbcType=VARCHAR}
    where review_id = #{reviewId,jdbcType=INTEGER}
  </update>


  <select id="getBookReview" resultMap="Testmap">
    select *
    from book
    where book_id=#{bookId}
  </select>
  <resultMap id="Testmap" type="testBookReview" extends="com.smile.amazon.mapper.BookMapper.BaseResultMap">
    <collection property="reviewList" fetchType="lazy" column="book_id" select="getBookReview"></collection>
  </resultMap>

  <select id="TestSelect" parameterType="int" resultMap="testReviewmap">
    select *
    from review
    where review.book_id=#{bookId}
  </select>
  <resultMap id="testReviewmap" type="review" extends="BaseResultMap"/>

</mapper>